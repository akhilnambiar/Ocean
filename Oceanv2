/* Ocean.java */

/**
 *  The Ocean class defines an object that models an ocean full of sharks and
 *  fish.  Descriptions of the methods you must implement appear below.  They
 *  include a constructor of the form
 *
 *      public Ocean(int i, int j, int starveTime);
 *
 *  that creates an empty ocean having width i and height j, in which sharks
 *  starve after starveTime timesteps.
 *
 *  See the README file accompanying this project for additional details.
 */

public class Ocean {

  /**
   *  Do not rename these constants.  WARNING:  if you change the numbers, you
   *  will need to recompile Test4.java.  Failure to do so will give you a very
   *  hard-to-find bug.
   */

  public final static int EMPTY = 0;
  public final static int SHARK = 1;
  public final static int FISH = 2;

  /**
   *  Define any variables associated with an Ocean object here.  These
   *  variables MUST be private.
   */
    private int xDim;
    private int yDim;
    private int starveTime;
    private int[][][] oceanArray;

  /**
   *  The following methods are required for Part I.
   */

  /**
   *  Ocean() is a constructor that creates an empty ocean having width i and
   *  height j, in which sharks starve after starveTime timesteps.
   *  @param i is the width of the ocean.
   *  @param j is the height of the ocean.
   *  @param starveTime is the number of timesteps sharks survive without food.
   */

  public Ocean(int i, int j, int starveTime) {
    // Your solution here.
      xDim = i;
      yDim = j;
      oceanArray = new int[xDim][yDim][2];
      this.starveTime = starveTime;
  }

  /**
   *  width() returns the width of an Ocean object.
   *  @return the width of the ocean.
   */

  public int width() {
    // Replace the following line with your solution.
    return xDim;
  }

  /**
   *  height() returns the height of an Ocean object.
   *  @return the height of the ocean.
   */

  public int height() {
    // Replace the following line with your solution.
    return yDim;
  }

  /**
   *  starveTime() returns the number of timesteps sharks survive without food.
   *  @return the number of timesteps sharks survive without food.
   */

  public int starveTime() {
    // Replace the following line with your solution.
    return this.starveTime;
  }

  /**
   *  addFish() places a fish in cell (x, y) if the cell is empty.  If the
   *  cell is already occupied, leave the cell as it is.
   *  @param x is the x-coordinate of the cell to place a fish in.
   *  @param y is the y-coordinate of the cell to place a fish in.
   */

  public void addFish(int x, int y) {
    // Your solution here.
      if (cellContents(x,y)==EMPTY) {
          oceanArray[x][y][0] = FISH;
      }
  }

  /**
   *  addShark() (with two parameters) places a newborn shark in cell (x, y) if
   *  the cell is empty.  A "newborn" shark is equivalent to a shark that has
   *  just eaten.  If the cell is already occupied, leave the cell as it is.
   *  @param x is the x-coordinate of the cell to place a shark in.
   *  @param y is the y-coordinate of the cell to place a shark in.
   */

  public void addShark(int x, int y) {
      if (cellContents(x,y)==EMPTY) {
          oceanArray[x][y][0] = SHARK;
          oceanArray[x][y][1] = 0;
      }
  }

  /**
   *  cellContents() returns EMPTY if cell (x, y) is empty, FISH if it contains
   *  a fish, and SHARK if it contains a shark.
   *  @param x is the x-coordinate of the cell whose contents are queried.
   *  @param y is the y-coordinate of the cell whose contents are queried.
   */

  public int cellContents(int x, int y) {
    // Replace the following line with your solution.
      
    return oceanArray[x][y][0];
  }

  /**
   *  timeStep() performs a simulation timestep as described in README.
   *  @return an ocean representing the elapse of one timestep.
   */

  public Ocean timeStep() {
    // Replace the following line with your solution.
      Ocean nextOcean = new Ocean(xDim,yDim,starveTime);
      for (int i=0; i<xDim; i++) {
          for (int j=0; j<yDim; j++) {
              if (oceanArray[i][j][0]==EMPTY){
                  if (emptyFishSpawn(i,j)==2){
                      nextOcean.addShark(i,j);
                  }
                  else if (emptyFishSpawn(i,j)==1){
                      nextOcean.addFish(i,j);
                  }
                  else {
                      nextOcean.oceanArray[i][j][0]=EMPTY;
                  }
              }
              else if (oceanArray[i][j][0]==SHARK){
                  if (sharkCheck(i,j)==0) {
                      nextOcean.addShark(i,j);
                  }
                  else if (sharkCheck(i,j)==1) {
                      nextOcean.addShark(i,j);
                      nextOcean.oceanArray[i][j][1] = oceanArray[i][j][1]+1;
                  }
                  else {
                      nextOcean.oceanArray[i][j][0]=EMPTY;
                  }
              }
              else {
                  if (fishCheck(i,j)==1) {
                      nextOcean.oceanArray[i][j][0]=EMPTY;
                  }
                  else if (fishCheck(i,j)==2) {
                      nextOcean.addShark(i,j);
                  }
                  else {
                      nextOcean.addFish(i,j);
                  }
                  
              }
          }
      }
      
    return nextOcean;
  }
    
/**
 This method checks to see what to do if there is a fish in a current cell
 return 0 means that a cell contains a fish and the neighbors are not sharks
 1 means that a fish has one neighbor shark, fish will disappear
 2 means that a fish has two neighbor sharks, shark will appear
 **/
    public int fishCheck (int x, int y) {
        int sharkNumber = 0;
        for (int i=-1; i<2; i++) {
            for (int j=-1; j<2; j++) {
                if (x+i<0 && y+j<0) {
                    if (oceanArray[xDim-1][yDim-1][0]==FISH) {
                        fishNumber++;
                    }
                }
                if (x+i<0) {
                    if (oceanArray[xDim-1][y+j][0]==FISH) {
                        fishNumber++;
                    }
                }
                if (j<0) {
                    if (oceanArray[x+i][yDim-1][0]==FISH) {
                        fishNumber++;
                    }
                }
                else{
                    if (oceanArray[x+i][y+j][0]==SHARK) {
                        sharkNumber++;
                    }
                }
            }
        }
        if (sharkNumber>1) {
            return 2;
        }
        else if (sharkNumber<0){
            return 0;
        }
        else{
            return 1;
        }
    }
    
/**
 This method will determine if a fish should be placed in here based on the rule
 that if there are more than 1 neighboring fish here. This can also check if 
 a shark should be spawned. This is determined if ther eare 2 nieghbor fish, and there is a neighbor shark
 0 means that there is a shark placed
 1 means that there is a fish placed
 2 means that there will be nothing placed
**/
    
    public int emptyFishSpawn (int x, int y) {
        int fishNumber = 0;
        int sharkNumber = 0;
        for (int i=-1; i<2; i++) {
            for (int j=-1; j<2; j++) {
                if (x+i<0 && y+j<0) {
                    if (oceanArray[xDim-1][yDim-1][0]==FISH) {
                        fishNumber++;
                    }
                    if (oceanArray[x+i][y+j][0]==SHARK) {
                        sharkNumber++;
                    }
                }
                if (i<0) {
                    if (oceanArray[xDim-1][y+j][0]==FISH) {
                        fishNumber++;
                    }
                    if (oceanArray[xDim-1][y+j][0]==SHARK) {
                        sharkNumber++;
                    }
                }
                if (j<0) {
                    if (oceanArray[x+i][yDim-1][0]==FISH) {
                        fishNumber++;
                    }
                    if (oceanArray[x+i][yDim-1][0]==SHARK) {
                        sharkNumber++;
                    }
                }
                else{
                    if (oceanArray[x+i][y+j][0]==FISH) {
                        fishNumber++;
                    }
                    if (oceanArray[x+i][y+j][0]==SHARK) {
                        sharkNumber++;
                    }
                }
            }
        }
        if (fishNumber>2 && sharkNumber>2) {
            return 2;
        }
        else if (fishNumber>2&&sharkNumber<2){
            return 1;
        }
        else{
            return 0;
        }
    }
    
    
/**
 This method is looking for what to do if there is a shark in a cell.
 If a neighbor is a fish. then the shark will no longer have any hunger.
 Or else, if the cell has a shark and there are no neighbor fish, the shark will get hungrier
 return values
 0-this means that he found a fish and isn't hungry
 1-This means that he hasn't found a fish and loses one hungriness
 2-This means he hasn't found a fish and dies
 */
    public int sharkCheck (int x, int y) {
        int fishNumber = 0; 
        for (int i=-1; i<2; i++) {
            for (int j=-1; j<2; j++) {
                if (oceanArray[xDim-1][yDim-1][0]==FISH) {
                    fishNumber++;
                }
            }
            if (i<0) {
                if (oceanArray[xDim-1][y+j][0]==FISH) {
                    fishNumber++;
                }
            }
            if (j<0) {
                if (oceanArray[x+i][yDim-1][0]==FISH) {
                    fishNumber++;
                }
            }
            else{
                if (oceanArray[x+i][y+j][0]==FISH) {
                    fishNumber++;
                }
            }
        }
        if (fishNumber>1) {
            return 0;
        }
        else{
            oceanArray[x][y][1]++;
            if (oceanArray[x][y][1]>starveTime) {
                return 2;
            }
            return 1;
        }
    }
    
    

  /**
   *  The following method is required for Part II.
   */
    

  /**
   *  addShark() (with three parameters) places a shark in cell (x, y) if the
   *  cell is empty.  The shark's hunger is represented by the third parameter.
   *  If the cell is already occupied, leave the cell as it is.  You will need
   *  this method to help convert run-length encodings to Oceans.
   *  @param x is the x-coordinate of the cell to place a shark in.
   *  @param y is the y-coordinate of the cell to place a shark in.
   *  @param feeding is an integer that indicates the shark's hunger.  You may
   *         encode it any way you want; for instance, "feeding" may be the
   *         last timestep the shark was fed, or the amount of time that has
   *         passed since the shark was last fed, or the amount of time left
   *         before the shark will starve.  It's up to you, but be consistent.
   */

  public void addShark(int x, int y, int feeding) {
    // Your solution here.
  }

  /**
   *  The following method is required for Part III.
   */

  /**
   *  sharkFeeding() returns an integer that indicates the hunger of the shark
   *  in cell (x, y), using the same "feeding" representation as the parameter
   *  to addShark() described above.  If cell (x, y) does not contain a shark,
   *  then its return value is undefined--that is, anything you want.
   *  Normally, this method should not be called if cell (x, y) does not
   *  contain a shark.  You will need this method to help convert Oceans to
   *  run-length encodings.
   *  @param x is the x-coordinate of the cell whose contents are queried.
   *  @param y is the y-coordinate of the cell whose contents are queried.
   */

  public int sharkFeeding(int x, int y) {
    // Replace the following line with your solution.
    return 0;
  }

}
